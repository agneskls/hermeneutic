// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: aggregator.proto
#ifndef GRPC_aggregator_2eproto__INCLUDED
#define GRPC_aggregator_2eproto__INCLUDED

#include "aggregator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>
#include <grpcpp/ports_def.inc>

namespace agg_proto {

class agg_service final {
 public:
  static constexpr char const* service_full_name() {
    return "agg_proto.agg_service";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::agg_proto::tick_update* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agg_proto::tick_update>> AsyncTickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agg_proto::tick_update>>(AsyncTickSnapshotRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agg_proto::tick_update>> PrepareAsyncTickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::agg_proto::tick_update>>(PrepareAsyncTickSnapshotRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::agg_proto::tick_update>> TickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::agg_proto::tick_update>>(TickStreamRequestRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::tick_update>> AsyncTickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::tick_update>>(AsyncTickStreamRequestRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::tick_update>> PrepareAsyncTickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::tick_update>>(PrepareAsyncTickStreamRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::agg_proto::batched_tick_update>> TickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::agg_proto::batched_tick_update>>(TickBatchedStreamRequestRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::batched_tick_update>> AsyncTickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::batched_tick_update>>(AsyncTickBatchedStreamRequestRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::batched_tick_update>> PrepareAsyncTickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::agg_proto::batched_tick_update>>(PrepareAsyncTickBatchedStreamRequestRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::grpc::ClientReadReactor< ::agg_proto::tick_update>* reactor) = 0;
      virtual void TickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::grpc::ClientReadReactor< ::agg_proto::batched_tick_update>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agg_proto::tick_update>* AsyncTickSnapshotRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::agg_proto::tick_update>* PrepareAsyncTickSnapshotRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::agg_proto::tick_update>* TickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agg_proto::tick_update>* AsyncTickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agg_proto::tick_update>* PrepareAsyncTickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::agg_proto::batched_tick_update>* TickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agg_proto::batched_tick_update>* AsyncTickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::agg_proto::batched_tick_update>* PrepareAsyncTickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::agg_proto::tick_update* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>> AsyncTickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>>(AsyncTickSnapshotRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>> PrepareAsyncTickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>>(PrepareAsyncTickSnapshotRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::agg_proto::tick_update>> TickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::agg_proto::tick_update>>(TickStreamRequestRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::tick_update>> AsyncTickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::tick_update>>(AsyncTickStreamRequestRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::tick_update>> PrepareAsyncTickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::tick_update>>(PrepareAsyncTickStreamRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::agg_proto::batched_tick_update>> TickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::agg_proto::batched_tick_update>>(TickBatchedStreamRequestRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>> AsyncTickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>>(AsyncTickBatchedStreamRequestRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>> PrepareAsyncTickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>>(PrepareAsyncTickBatchedStreamRequestRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response, std::function<void(::grpc::Status)>) override;
      void TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::grpc::ClientReadReactor< ::agg_proto::tick_update>* reactor) override;
      void TickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::grpc::ClientReadReactor< ::agg_proto::batched_tick_update>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>* AsyncTickSnapshotRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>* PrepareAsyncTickSnapshotRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::agg_proto::tick_update>* TickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) override;
    ::grpc::ClientAsyncReader< ::agg_proto::tick_update>* AsyncTickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::agg_proto::tick_update>* PrepareAsyncTickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::agg_proto::batched_tick_update>* TickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) override;
    ::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>* AsyncTickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>* PrepareAsyncTickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_TickSnapshotRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_TickStreamRequest_;
    const ::grpc::internal::RpcMethod rpcmethod_TickBatchedStreamRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status TickSnapshotRequest(::grpc::ServerContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response);
    virtual ::grpc::Status TickStreamRequest(::grpc::ServerContext* context, const ::agg_proto::tick_request* request, ::grpc::ServerWriter< ::agg_proto::tick_update>* writer);
    virtual ::grpc::Status TickBatchedStreamRequest(::grpc::ServerContext* context, const ::agg_proto::tick_request* request, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_TickSnapshotRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TickSnapshotRequest() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_TickSnapshotRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickSnapshotRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::agg_proto::tick_update* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTickSnapshotRequest(::grpc::ServerContext* context, ::agg_proto::tick_request* request, ::grpc::ServerAsyncResponseWriter< ::agg_proto::tick_update>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TickStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TickStreamRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_TickStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTickStreamRequest(::grpc::ServerContext* context, ::agg_proto::tick_request* request, ::grpc::ServerAsyncWriter< ::agg_proto::tick_update>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TickBatchedStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TickBatchedStreamRequest() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TickBatchedStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickBatchedStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTickBatchedStreamRequest(::grpc::ServerContext* context, ::agg_proto::tick_request* request, ::grpc::ServerAsyncWriter< ::agg_proto::batched_tick_update>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_TickSnapshotRequest<WithAsyncMethod_TickStreamRequest<WithAsyncMethod_TickBatchedStreamRequest<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_TickSnapshotRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TickSnapshotRequest() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::agg_proto::tick_request, ::agg_proto::tick_update>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response) { return this->TickSnapshotRequest(context, request, response); }));}
    void SetMessageAllocatorFor_TickSnapshotRequest(
        ::grpc::MessageAllocator< ::agg_proto::tick_request, ::agg_proto::tick_update>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::agg_proto::tick_request, ::agg_proto::tick_update>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TickSnapshotRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickSnapshotRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::agg_proto::tick_update* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TickSnapshotRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::agg_proto::tick_update* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TickStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TickStreamRequest() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::agg_proto::tick_request, ::agg_proto::tick_update>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agg_proto::tick_request* request) { return this->TickStreamRequest(context, request); }));
    }
    ~WithCallbackMethod_TickStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::agg_proto::tick_update>* TickStreamRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TickBatchedStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TickBatchedStreamRequest() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::agg_proto::tick_request, ::agg_proto::batched_tick_update>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::agg_proto::tick_request* request) { return this->TickBatchedStreamRequest(context, request); }));
    }
    ~WithCallbackMethod_TickBatchedStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickBatchedStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::agg_proto::batched_tick_update>* TickBatchedStreamRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_TickSnapshotRequest<WithCallbackMethod_TickStreamRequest<WithCallbackMethod_TickBatchedStreamRequest<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_TickSnapshotRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TickSnapshotRequest() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_TickSnapshotRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickSnapshotRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::agg_proto::tick_update* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TickStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TickStreamRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_TickStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TickBatchedStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TickBatchedStreamRequest() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TickBatchedStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickBatchedStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_TickSnapshotRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TickSnapshotRequest() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_TickSnapshotRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickSnapshotRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::agg_proto::tick_update* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTickSnapshotRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TickStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TickStreamRequest() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_TickStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTickStreamRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TickBatchedStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TickBatchedStreamRequest() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TickBatchedStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickBatchedStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTickBatchedStreamRequest(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TickSnapshotRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TickSnapshotRequest() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TickSnapshotRequest(context, request, response); }));
    }
    ~WithRawCallbackMethod_TickSnapshotRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickSnapshotRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::agg_proto::tick_update* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TickSnapshotRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TickStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TickStreamRequest() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->TickStreamRequest(context, request); }));
    }
    ~WithRawCallbackMethod_TickStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* TickStreamRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TickBatchedStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TickBatchedStreamRequest() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->TickBatchedStreamRequest(context, request); }));
    }
    ~WithRawCallbackMethod_TickBatchedStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TickBatchedStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* TickBatchedStreamRequest(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TickSnapshotRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TickSnapshotRequest() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::agg_proto::tick_request, ::agg_proto::tick_update>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::agg_proto::tick_request, ::agg_proto::tick_update>* streamer) {
                       return this->StreamedTickSnapshotRequest(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TickSnapshotRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TickSnapshotRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::agg_proto::tick_update* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTickSnapshotRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::agg_proto::tick_request,::agg_proto::tick_update>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_TickSnapshotRequest<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_TickStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_TickStreamRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::agg_proto::tick_request, ::agg_proto::tick_update>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::agg_proto::tick_request, ::agg_proto::tick_update>* streamer) {
                       return this->StreamedTickStreamRequest(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_TickStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TickStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTickStreamRequest(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::agg_proto::tick_request,::agg_proto::tick_update>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_TickBatchedStreamRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_TickBatchedStreamRequest() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::agg_proto::tick_request, ::agg_proto::batched_tick_update>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::agg_proto::tick_request, ::agg_proto::batched_tick_update>* streamer) {
                       return this->StreamedTickBatchedStreamRequest(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_TickBatchedStreamRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TickBatchedStreamRequest(::grpc::ServerContext* /*context*/, const ::agg_proto::tick_request* /*request*/, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedTickBatchedStreamRequest(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::agg_proto::tick_request,::agg_proto::batched_tick_update>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_TickStreamRequest<WithSplitStreamingMethod_TickBatchedStreamRequest<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_TickSnapshotRequest<WithSplitStreamingMethod_TickStreamRequest<WithSplitStreamingMethod_TickBatchedStreamRequest<Service > > > StreamedService;
};

}  // namespace agg_proto


#include <grpcpp/ports_undef.inc>
#endif  // GRPC_aggregator_2eproto__INCLUDED
