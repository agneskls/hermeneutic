// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: aggregator.proto
// Protobuf C++ Version: 5.29.5

#include "aggregator.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace agg_proto {

inline constexpr tick_update::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : price_{0},
        quantity_{0},
        tick_id_{::int64_t{0}},
        side_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR tick_update::tick_update(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct tick_updateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR tick_updateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~tick_updateDefaultTypeInternal() {}
  union {
    tick_update _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 tick_updateDefaultTypeInternal _tick_update_default_instance_;

inline constexpr tick_request::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR tick_request::tick_request(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct tick_requestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR tick_requestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~tick_requestDefaultTypeInternal() {}
  union {
    tick_request _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 tick_requestDefaultTypeInternal _tick_request_default_instance_;

inline constexpr batched_tick_update::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : updates_{},
        symbol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tick_id_{::int64_t{0}},
        flag_{::uint64_t{0u}},
        exchange_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR batched_tick_update::batched_tick_update(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct batched_tick_updateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR batched_tick_updateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~batched_tick_updateDefaultTypeInternal() {}
  union {
    batched_tick_update _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 batched_tick_updateDefaultTypeInternal _batched_tick_update_default_instance_;
}  // namespace agg_proto
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_aggregator_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_aggregator_2eproto = nullptr;
const ::uint32_t
    TableStruct_aggregator_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::agg_proto::tick_request, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::agg_proto::tick_request, _impl_.symbol_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::agg_proto::tick_update, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::agg_proto::tick_update, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::agg_proto::tick_update, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::agg_proto::tick_update, _impl_.quantity_),
        PROTOBUF_FIELD_OFFSET(::agg_proto::tick_update, _impl_.tick_id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::agg_proto::batched_tick_update, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::agg_proto::batched_tick_update, _impl_.symbol_),
        PROTOBUF_FIELD_OFFSET(::agg_proto::batched_tick_update, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::agg_proto::batched_tick_update, _impl_.tick_id_),
        PROTOBUF_FIELD_OFFSET(::agg_proto::batched_tick_update, _impl_.flag_),
        PROTOBUF_FIELD_OFFSET(::agg_proto::batched_tick_update, _impl_.updates_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::agg_proto::tick_request)},
        {9, -1, -1, sizeof(::agg_proto::tick_update)},
        {21, -1, -1, sizeof(::agg_proto::batched_tick_update)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::agg_proto::_tick_request_default_instance_._instance,
    &::agg_proto::_tick_update_default_instance_._instance,
    &::agg_proto::_batched_tick_update_default_instance_._instance,
};
const char descriptor_table_protodef_aggregator_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020aggregator.proto\022\tagg_proto\"\036\n\014tick_re"
    "quest\022\016\n\006symbol\030\001 \001(\t\"M\n\013tick_update\022\014\n\004"
    "side\030\001 \001(\r\022\r\n\005price\030\002 \001(\001\022\020\n\010quantity\030\003 "
    "\001(\001\022\017\n\007tick_id\030\004 \001(\003\"\177\n\023batched_tick_upd"
    "ate\022\016\n\006symbol\030\001 \001(\t\022\020\n\010exchange\030\002 \001(\r\022\017\n"
    "\007tick_id\030\003 \001(\003\022\014\n\004flag\030\004 \001(\004\022\'\n\007updates\030"
    "\005 \003(\0132\026.agg_proto.tick_update2\372\001\n\013agg_se"
    "rvice\022H\n\023TickSnapshotRequest\022\027.agg_proto"
    ".tick_request\032\026.agg_proto.tick_update\"\000\022"
    "H\n\021TickStreamRequest\022\027.agg_proto.tick_re"
    "quest\032\026.agg_proto.tick_update\"\0000\001\022W\n\030Tic"
    "kBatchedStreamRequest\022\027.agg_proto.tick_r"
    "equest\032\036.agg_proto.batched_tick_update\"\000"
    "0\001b\006proto3"
};
static ::absl::once_flag descriptor_table_aggregator_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_aggregator_2eproto = {
    false,
    false,
    530,
    descriptor_table_protodef_aggregator_2eproto,
    "aggregator.proto",
    &descriptor_table_aggregator_2eproto_once,
    nullptr,
    0,
    3,
    schemas,
    file_default_instances,
    TableStruct_aggregator_2eproto::offsets,
    file_level_enum_descriptors_aggregator_2eproto,
    file_level_service_descriptors_aggregator_2eproto,
};
namespace agg_proto {
// ===================================================================

class tick_request::_Internal {
 public:
};

tick_request::tick_request(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agg_proto.tick_request)
}
inline PROTOBUF_NDEBUG_INLINE tick_request::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::agg_proto::tick_request& from_msg)
      : symbol_(arena, from.symbol_),
        _cached_size_{0} {}

tick_request::tick_request(
    ::google::protobuf::Arena* arena,
    const tick_request& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  tick_request* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:agg_proto.tick_request)
}
inline PROTOBUF_NDEBUG_INLINE tick_request::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : symbol_(arena),
        _cached_size_{0} {}

inline void tick_request::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
tick_request::~tick_request() {
  // @@protoc_insertion_point(destructor:agg_proto.tick_request)
  SharedDtor(*this);
}
inline void tick_request::SharedDtor(MessageLite& self) {
  tick_request& this_ = static_cast<tick_request&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* tick_request::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) tick_request(arena);
}
constexpr auto tick_request::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(tick_request),
                                            alignof(tick_request));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull tick_request::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_tick_request_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &tick_request::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<tick_request>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &tick_request::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<tick_request>(), &tick_request::ByteSizeLong,
            &tick_request::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(tick_request, _impl_._cached_size_),
        false,
    },
    &tick_request::kDescriptorMethods,
    &descriptor_table_aggregator_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* tick_request::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 37, 2> tick_request::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::agg_proto::tick_request>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(tick_request, _impl_.symbol_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(tick_request, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\6\0\0\0\0\0\0"
    "agg_proto.tick_request"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void tick_request::Clear() {
// @@protoc_insertion_point(message_clear_start:agg_proto.tick_request)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.symbol_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* tick_request::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const tick_request& this_ = static_cast<const tick_request&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* tick_request::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const tick_request& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:agg_proto.tick_request)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "agg_proto.tick_request.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:agg_proto.tick_request)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t tick_request::ByteSizeLong(const MessageLite& base) {
          const tick_request& this_ = static_cast<const tick_request&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t tick_request::ByteSizeLong() const {
          const tick_request& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:agg_proto.tick_request)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void tick_request::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<tick_request*>(&to_msg);
  auto& from = static_cast<const tick_request&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agg_proto.tick_request)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void tick_request::CopyFrom(const tick_request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agg_proto.tick_request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void tick_request::InternalSwap(tick_request* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
}

::google::protobuf::Metadata tick_request::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class tick_update::_Internal {
 public:
};

tick_update::tick_update(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agg_proto.tick_update)
}
tick_update::tick_update(
    ::google::protobuf::Arena* arena, const tick_update& from)
    : tick_update(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE tick_update::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void tick_update::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, side_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::side_));
}
tick_update::~tick_update() {
  // @@protoc_insertion_point(destructor:agg_proto.tick_update)
  SharedDtor(*this);
}
inline void tick_update::SharedDtor(MessageLite& self) {
  tick_update& this_ = static_cast<tick_update&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* tick_update::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) tick_update(arena);
}
constexpr auto tick_update::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(tick_update),
                                            alignof(tick_update));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull tick_update::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_tick_update_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &tick_update::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<tick_update>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &tick_update::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<tick_update>(), &tick_update::ByteSizeLong,
            &tick_update::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(tick_update, _impl_._cached_size_),
        false,
    },
    &tick_update::kDescriptorMethods,
    &descriptor_table_aggregator_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* tick_update::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> tick_update::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::agg_proto::tick_update>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 tick_id = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(tick_update, _impl_.tick_id_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(tick_update, _impl_.tick_id_)}},
    // uint32 side = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(tick_update, _impl_.side_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(tick_update, _impl_.side_)}},
    // double price = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(tick_update, _impl_.price_)}},
    // double quantity = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(tick_update, _impl_.quantity_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 side = 1;
    {PROTOBUF_FIELD_OFFSET(tick_update, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // double price = 2;
    {PROTOBUF_FIELD_OFFSET(tick_update, _impl_.price_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double quantity = 3;
    {PROTOBUF_FIELD_OFFSET(tick_update, _impl_.quantity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // int64 tick_id = 4;
    {PROTOBUF_FIELD_OFFSET(tick_update, _impl_.tick_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void tick_update::Clear() {
// @@protoc_insertion_point(message_clear_start:agg_proto.tick_update)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.price_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.side_) -
      reinterpret_cast<char*>(&_impl_.price_)) + sizeof(_impl_.side_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* tick_update::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const tick_update& this_ = static_cast<const tick_update&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* tick_update::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const tick_update& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:agg_proto.tick_update)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 side = 1;
          if (this_._internal_side() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_side(), target);
          }

          // double price = 2;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                2, this_._internal_price(), target);
          }

          // double quantity = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_quantity(), target);
          }

          // int64 tick_id = 4;
          if (this_._internal_tick_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<4>(
                    stream, this_._internal_tick_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:agg_proto.tick_update)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t tick_update::ByteSizeLong(const MessageLite& base) {
          const tick_update& this_ = static_cast<const tick_update&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t tick_update::ByteSizeLong() const {
          const tick_update& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:agg_proto.tick_update)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // double price = 2;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price()) != 0) {
              total_size += 9;
            }
            // double quantity = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_quantity()) != 0) {
              total_size += 9;
            }
            // int64 tick_id = 4;
            if (this_._internal_tick_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_tick_id());
            }
            // uint32 side = 1;
            if (this_._internal_side() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_side());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void tick_update::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<tick_update*>(&to_msg);
  auto& from = static_cast<const tick_update&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agg_proto.tick_update)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint64_t>(from._internal_price()) != 0) {
    _this->_impl_.price_ = from._impl_.price_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_quantity()) != 0) {
    _this->_impl_.quantity_ = from._impl_.quantity_;
  }
  if (from._internal_tick_id() != 0) {
    _this->_impl_.tick_id_ = from._impl_.tick_id_;
  }
  if (from._internal_side() != 0) {
    _this->_impl_.side_ = from._impl_.side_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void tick_update::CopyFrom(const tick_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agg_proto.tick_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void tick_update::InternalSwap(tick_update* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(tick_update, _impl_.side_)
      + sizeof(tick_update::_impl_.side_)
      - PROTOBUF_FIELD_OFFSET(tick_update, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata tick_update::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class batched_tick_update::_Internal {
 public:
};

batched_tick_update::batched_tick_update(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:agg_proto.batched_tick_update)
}
inline PROTOBUF_NDEBUG_INLINE batched_tick_update::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::agg_proto::batched_tick_update& from_msg)
      : updates_{visibility, arena, from.updates_},
        symbol_(arena, from.symbol_),
        _cached_size_{0} {}

batched_tick_update::batched_tick_update(
    ::google::protobuf::Arena* arena,
    const batched_tick_update& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  batched_tick_update* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tick_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, tick_id_),
           offsetof(Impl_, exchange_) -
               offsetof(Impl_, tick_id_) +
               sizeof(Impl_::exchange_));

  // @@protoc_insertion_point(copy_constructor:agg_proto.batched_tick_update)
}
inline PROTOBUF_NDEBUG_INLINE batched_tick_update::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : updates_{visibility, arena},
        symbol_(arena),
        _cached_size_{0} {}

inline void batched_tick_update::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tick_id_),
           0,
           offsetof(Impl_, exchange_) -
               offsetof(Impl_, tick_id_) +
               sizeof(Impl_::exchange_));
}
batched_tick_update::~batched_tick_update() {
  // @@protoc_insertion_point(destructor:agg_proto.batched_tick_update)
  SharedDtor(*this);
}
inline void batched_tick_update::SharedDtor(MessageLite& self) {
  batched_tick_update& this_ = static_cast<batched_tick_update&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.symbol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* batched_tick_update::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) batched_tick_update(arena);
}
constexpr auto batched_tick_update::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.updates_) +
          decltype(batched_tick_update::_impl_.updates_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(batched_tick_update), alignof(batched_tick_update), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&batched_tick_update::PlacementNew_,
                                 sizeof(batched_tick_update),
                                 alignof(batched_tick_update));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull batched_tick_update::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_batched_tick_update_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &batched_tick_update::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<batched_tick_update>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &batched_tick_update::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<batched_tick_update>(), &batched_tick_update::ByteSizeLong,
            &batched_tick_update::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_._cached_size_),
        false,
    },
    &batched_tick_update::kDescriptorMethods,
    &descriptor_table_aggregator_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* batched_tick_update::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 44, 2> batched_tick_update::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::agg_proto::batched_tick_update>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string symbol = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.symbol_)}},
    // uint32 exchange = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(batched_tick_update, _impl_.exchange_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.exchange_)}},
    // int64 tick_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(batched_tick_update, _impl_.tick_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.tick_id_)}},
    // uint64 flag = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(batched_tick_update, _impl_.flag_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.flag_)}},
    // repeated .agg_proto.tick_update updates = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.updates_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string symbol = 1;
    {PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.symbol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 exchange = 2;
    {PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.exchange_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // int64 tick_id = 3;
    {PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.tick_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // uint64 flag = 4;
    {PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // repeated .agg_proto.tick_update updates = 5;
    {PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.updates_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::agg_proto::tick_update>()},
  }}, {{
    "\35\6\0\0\0\0\0\0"
    "agg_proto.batched_tick_update"
    "symbol"
  }},
};

PROTOBUF_NOINLINE void batched_tick_update::Clear() {
// @@protoc_insertion_point(message_clear_start:agg_proto.batched_tick_update)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updates_.Clear();
  _impl_.symbol_.ClearToEmpty();
  ::memset(&_impl_.tick_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.exchange_) -
      reinterpret_cast<char*>(&_impl_.tick_id_)) + sizeof(_impl_.exchange_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* batched_tick_update::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const batched_tick_update& this_ = static_cast<const batched_tick_update&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* batched_tick_update::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const batched_tick_update& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:agg_proto.batched_tick_update)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string symbol = 1;
          if (!this_._internal_symbol().empty()) {
            const std::string& _s = this_._internal_symbol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "agg_proto.batched_tick_update.symbol");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 exchange = 2;
          if (this_._internal_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_exchange(), target);
          }

          // int64 tick_id = 3;
          if (this_._internal_tick_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_tick_id(), target);
          }

          // uint64 flag = 4;
          if (this_._internal_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_flag(), target);
          }

          // repeated .agg_proto.tick_update updates = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_updates_size());
               i < n; i++) {
            const auto& repfield = this_._internal_updates().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:agg_proto.batched_tick_update)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t batched_tick_update::ByteSizeLong(const MessageLite& base) {
          const batched_tick_update& this_ = static_cast<const batched_tick_update&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t batched_tick_update::ByteSizeLong() const {
          const batched_tick_update& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:agg_proto.batched_tick_update)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .agg_proto.tick_update updates = 5;
            {
              total_size += 1UL * this_._internal_updates_size();
              for (const auto& msg : this_._internal_updates()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string symbol = 1;
            if (!this_._internal_symbol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_symbol());
            }
            // int64 tick_id = 3;
            if (this_._internal_tick_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_tick_id());
            }
            // uint64 flag = 4;
            if (this_._internal_flag() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_flag());
            }
            // uint32 exchange = 2;
            if (this_._internal_exchange() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_exchange());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void batched_tick_update::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<batched_tick_update*>(&to_msg);
  auto& from = static_cast<const batched_tick_update&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:agg_proto.batched_tick_update)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_updates()->MergeFrom(
      from._internal_updates());
  if (!from._internal_symbol().empty()) {
    _this->_internal_set_symbol(from._internal_symbol());
  }
  if (from._internal_tick_id() != 0) {
    _this->_impl_.tick_id_ = from._impl_.tick_id_;
  }
  if (from._internal_flag() != 0) {
    _this->_impl_.flag_ = from._impl_.flag_;
  }
  if (from._internal_exchange() != 0) {
    _this->_impl_.exchange_ = from._impl_.exchange_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void batched_tick_update::CopyFrom(const batched_tick_update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:agg_proto.batched_tick_update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void batched_tick_update::InternalSwap(batched_tick_update* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.symbol_, &other->_impl_.symbol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.exchange_)
      + sizeof(batched_tick_update::_impl_.exchange_)
      - PROTOBUF_FIELD_OFFSET(batched_tick_update, _impl_.tick_id_)>(
          reinterpret_cast<char*>(&_impl_.tick_id_),
          reinterpret_cast<char*>(&other->_impl_.tick_id_));
}

::google::protobuf::Metadata batched_tick_update::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace agg_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_aggregator_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
