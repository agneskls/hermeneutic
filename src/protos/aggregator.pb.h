// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: aggregator.proto
// Protobuf C++ Version: 5.29.5

#ifndef aggregator_2eproto_2epb_2eh
#define aggregator_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029005
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_aggregator_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_aggregator_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_aggregator_2eproto;
namespace agg_proto {
class batched_tick_update;
struct batched_tick_updateDefaultTypeInternal;
extern batched_tick_updateDefaultTypeInternal _batched_tick_update_default_instance_;
class tick_request;
struct tick_requestDefaultTypeInternal;
extern tick_requestDefaultTypeInternal _tick_request_default_instance_;
class tick_update;
struct tick_updateDefaultTypeInternal;
extern tick_updateDefaultTypeInternal _tick_update_default_instance_;
}  // namespace agg_proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace agg_proto {

// ===================================================================


// -------------------------------------------------------------------

class tick_update final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:agg_proto.tick_update) */ {
 public:
  inline tick_update() : tick_update(nullptr) {}
  ~tick_update() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(tick_update* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(tick_update));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR tick_update(
      ::google::protobuf::internal::ConstantInitialized);

  inline tick_update(const tick_update& from) : tick_update(nullptr, from) {}
  inline tick_update(tick_update&& from) noexcept
      : tick_update(nullptr, std::move(from)) {}
  inline tick_update& operator=(const tick_update& from) {
    CopyFrom(from);
    return *this;
  }
  inline tick_update& operator=(tick_update&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tick_update& default_instance() {
    return *internal_default_instance();
  }
  static inline const tick_update* internal_default_instance() {
    return reinterpret_cast<const tick_update*>(
        &_tick_update_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(tick_update& a, tick_update& b) { a.Swap(&b); }
  inline void Swap(tick_update* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tick_update* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tick_update* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<tick_update>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const tick_update& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const tick_update& from) { tick_update::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(tick_update* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "agg_proto.tick_update"; }

 protected:
  explicit tick_update(::google::protobuf::Arena* arena);
  tick_update(::google::protobuf::Arena* arena, const tick_update& from);
  tick_update(::google::protobuf::Arena* arena, tick_update&& from) noexcept
      : tick_update(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPriceFieldNumber = 2,
    kQuantityFieldNumber = 3,
    kTickIdFieldNumber = 4,
    kSideFieldNumber = 1,
  };
  // double price = 2;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double quantity = 3;
  void clear_quantity() ;
  double quantity() const;
  void set_quantity(double value);

  private:
  double _internal_quantity() const;
  void _internal_set_quantity(double value);

  public:
  // int64 tick_id = 4;
  void clear_tick_id() ;
  ::int64_t tick_id() const;
  void set_tick_id(::int64_t value);

  private:
  ::int64_t _internal_tick_id() const;
  void _internal_set_tick_id(::int64_t value);

  public:
  // uint32 side = 1;
  void clear_side() ;
  ::uint32_t side() const;
  void set_side(::uint32_t value);

  private:
  ::uint32_t _internal_side() const;
  void _internal_set_side(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:agg_proto.tick_update)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const tick_update& from_msg);
    double price_;
    double quantity_;
    ::int64_t tick_id_;
    ::uint32_t side_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aggregator_2eproto;
};
// -------------------------------------------------------------------

class tick_request final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:agg_proto.tick_request) */ {
 public:
  inline tick_request() : tick_request(nullptr) {}
  ~tick_request() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(tick_request* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(tick_request));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR tick_request(
      ::google::protobuf::internal::ConstantInitialized);

  inline tick_request(const tick_request& from) : tick_request(nullptr, from) {}
  inline tick_request(tick_request&& from) noexcept
      : tick_request(nullptr, std::move(from)) {}
  inline tick_request& operator=(const tick_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline tick_request& operator=(tick_request&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const tick_request& default_instance() {
    return *internal_default_instance();
  }
  static inline const tick_request* internal_default_instance() {
    return reinterpret_cast<const tick_request*>(
        &_tick_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(tick_request& a, tick_request& b) { a.Swap(&b); }
  inline void Swap(tick_request* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(tick_request* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  tick_request* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<tick_request>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const tick_request& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const tick_request& from) { tick_request::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(tick_request* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "agg_proto.tick_request"; }

 protected:
  explicit tick_request(::google::protobuf::Arena* arena);
  tick_request(::google::protobuf::Arena* arena, const tick_request& from);
  tick_request(::google::protobuf::Arena* arena, tick_request&& from) noexcept
      : tick_request(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSymbolFieldNumber = 1,
  };
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // @@protoc_insertion_point(class_scope:agg_proto.tick_request)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const tick_request& from_msg);
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aggregator_2eproto;
};
// -------------------------------------------------------------------

class batched_tick_update final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:agg_proto.batched_tick_update) */ {
 public:
  inline batched_tick_update() : batched_tick_update(nullptr) {}
  ~batched_tick_update() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(batched_tick_update* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(batched_tick_update));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR batched_tick_update(
      ::google::protobuf::internal::ConstantInitialized);

  inline batched_tick_update(const batched_tick_update& from) : batched_tick_update(nullptr, from) {}
  inline batched_tick_update(batched_tick_update&& from) noexcept
      : batched_tick_update(nullptr, std::move(from)) {}
  inline batched_tick_update& operator=(const batched_tick_update& from) {
    CopyFrom(from);
    return *this;
  }
  inline batched_tick_update& operator=(batched_tick_update&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const batched_tick_update& default_instance() {
    return *internal_default_instance();
  }
  static inline const batched_tick_update* internal_default_instance() {
    return reinterpret_cast<const batched_tick_update*>(
        &_batched_tick_update_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(batched_tick_update& a, batched_tick_update& b) { a.Swap(&b); }
  inline void Swap(batched_tick_update* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(batched_tick_update* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  batched_tick_update* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<batched_tick_update>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const batched_tick_update& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const batched_tick_update& from) { batched_tick_update::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(batched_tick_update* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "agg_proto.batched_tick_update"; }

 protected:
  explicit batched_tick_update(::google::protobuf::Arena* arena);
  batched_tick_update(::google::protobuf::Arena* arena, const batched_tick_update& from);
  batched_tick_update(::google::protobuf::Arena* arena, batched_tick_update&& from) noexcept
      : batched_tick_update(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUpdatesFieldNumber = 5,
    kSymbolFieldNumber = 1,
    kTickIdFieldNumber = 3,
    kFlagFieldNumber = 4,
    kExchangeFieldNumber = 2,
  };
  // repeated .agg_proto.tick_update updates = 5;
  int updates_size() const;
  private:
  int _internal_updates_size() const;

  public:
  void clear_updates() ;
  ::agg_proto::tick_update* mutable_updates(int index);
  ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>* mutable_updates();

  private:
  const ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>& _internal_updates() const;
  ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>* _internal_mutable_updates();
  public:
  const ::agg_proto::tick_update& updates(int index) const;
  ::agg_proto::tick_update* add_updates();
  const ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>& updates() const;
  // string symbol = 1;
  void clear_symbol() ;
  const std::string& symbol() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_symbol(Arg_&& arg, Args_... args);
  std::string* mutable_symbol();
  PROTOBUF_NODISCARD std::string* release_symbol();
  void set_allocated_symbol(std::string* value);

  private:
  const std::string& _internal_symbol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_symbol(
      const std::string& value);
  std::string* _internal_mutable_symbol();

  public:
  // int64 tick_id = 3;
  void clear_tick_id() ;
  ::int64_t tick_id() const;
  void set_tick_id(::int64_t value);

  private:
  ::int64_t _internal_tick_id() const;
  void _internal_set_tick_id(::int64_t value);

  public:
  // uint64 flag = 4;
  void clear_flag() ;
  ::uint64_t flag() const;
  void set_flag(::uint64_t value);

  private:
  ::uint64_t _internal_flag() const;
  void _internal_set_flag(::uint64_t value);

  public:
  // uint32 exchange = 2;
  void clear_exchange() ;
  ::uint32_t exchange() const;
  void set_exchange(::uint32_t value);

  private:
  ::uint32_t _internal_exchange() const;
  void _internal_set_exchange(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:agg_proto.batched_tick_update)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      44, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const batched_tick_update& from_msg);
    ::google::protobuf::RepeatedPtrField< ::agg_proto::tick_update > updates_;
    ::google::protobuf::internal::ArenaStringPtr symbol_;
    ::int64_t tick_id_;
    ::uint64_t flag_;
    ::uint32_t exchange_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_aggregator_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// tick_request

// string symbol = 1;
inline void tick_request::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& tick_request::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agg_proto.tick_request.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void tick_request::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agg_proto.tick_request.symbol)
}
inline std::string* tick_request::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:agg_proto.tick_request.symbol)
  return _s;
}
inline const std::string& tick_request::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void tick_request::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* tick_request::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* tick_request::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:agg_proto.tick_request.symbol)
  return _impl_.symbol_.Release();
}
inline void tick_request::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:agg_proto.tick_request.symbol)
}

// -------------------------------------------------------------------

// tick_update

// uint32 side = 1;
inline void tick_update::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = 0u;
}
inline ::uint32_t tick_update::side() const {
  // @@protoc_insertion_point(field_get:agg_proto.tick_update.side)
  return _internal_side();
}
inline void tick_update::set_side(::uint32_t value) {
  _internal_set_side(value);
  // @@protoc_insertion_point(field_set:agg_proto.tick_update.side)
}
inline ::uint32_t tick_update::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.side_;
}
inline void tick_update::_internal_set_side(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_ = value;
}

// double price = 2;
inline void tick_update::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double tick_update::price() const {
  // @@protoc_insertion_point(field_get:agg_proto.tick_update.price)
  return _internal_price();
}
inline void tick_update::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:agg_proto.tick_update.price)
}
inline double tick_update::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void tick_update::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// double quantity = 3;
inline void tick_update::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = 0;
}
inline double tick_update::quantity() const {
  // @@protoc_insertion_point(field_get:agg_proto.tick_update.quantity)
  return _internal_quantity();
}
inline void tick_update::set_quantity(double value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:agg_proto.tick_update.quantity)
}
inline double tick_update::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void tick_update::_internal_set_quantity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// int64 tick_id = 4;
inline void tick_update::clear_tick_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_id_ = ::int64_t{0};
}
inline ::int64_t tick_update::tick_id() const {
  // @@protoc_insertion_point(field_get:agg_proto.tick_update.tick_id)
  return _internal_tick_id();
}
inline void tick_update::set_tick_id(::int64_t value) {
  _internal_set_tick_id(value);
  // @@protoc_insertion_point(field_set:agg_proto.tick_update.tick_id)
}
inline ::int64_t tick_update::_internal_tick_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tick_id_;
}
inline void tick_update::_internal_set_tick_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_id_ = value;
}

// -------------------------------------------------------------------

// batched_tick_update

// string symbol = 1;
inline void batched_tick_update::clear_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.ClearToEmpty();
}
inline const std::string& batched_tick_update::symbol() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agg_proto.batched_tick_update.symbol)
  return _internal_symbol();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void batched_tick_update::set_symbol(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:agg_proto.batched_tick_update.symbol)
}
inline std::string* batched_tick_update::mutable_symbol() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_symbol();
  // @@protoc_insertion_point(field_mutable:agg_proto.batched_tick_update.symbol)
  return _s;
}
inline const std::string& batched_tick_update::_internal_symbol() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.symbol_.Get();
}
inline void batched_tick_update::_internal_set_symbol(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.Set(value, GetArena());
}
inline std::string* batched_tick_update::_internal_mutable_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.symbol_.Mutable( GetArena());
}
inline std::string* batched_tick_update::release_symbol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:agg_proto.batched_tick_update.symbol)
  return _impl_.symbol_.Release();
}
inline void batched_tick_update::set_allocated_symbol(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.symbol_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.symbol_.IsDefault()) {
    _impl_.symbol_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:agg_proto.batched_tick_update.symbol)
}

// uint32 exchange = 2;
inline void batched_tick_update::clear_exchange() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_ = 0u;
}
inline ::uint32_t batched_tick_update::exchange() const {
  // @@protoc_insertion_point(field_get:agg_proto.batched_tick_update.exchange)
  return _internal_exchange();
}
inline void batched_tick_update::set_exchange(::uint32_t value) {
  _internal_set_exchange(value);
  // @@protoc_insertion_point(field_set:agg_proto.batched_tick_update.exchange)
}
inline ::uint32_t batched_tick_update::_internal_exchange() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchange_;
}
inline void batched_tick_update::_internal_set_exchange(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchange_ = value;
}

// int64 tick_id = 3;
inline void batched_tick_update::clear_tick_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_id_ = ::int64_t{0};
}
inline ::int64_t batched_tick_update::tick_id() const {
  // @@protoc_insertion_point(field_get:agg_proto.batched_tick_update.tick_id)
  return _internal_tick_id();
}
inline void batched_tick_update::set_tick_id(::int64_t value) {
  _internal_set_tick_id(value);
  // @@protoc_insertion_point(field_set:agg_proto.batched_tick_update.tick_id)
}
inline ::int64_t batched_tick_update::_internal_tick_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tick_id_;
}
inline void batched_tick_update::_internal_set_tick_id(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tick_id_ = value;
}

// uint64 flag = 4;
inline void batched_tick_update::clear_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.flag_ = ::uint64_t{0u};
}
inline ::uint64_t batched_tick_update::flag() const {
  // @@protoc_insertion_point(field_get:agg_proto.batched_tick_update.flag)
  return _internal_flag();
}
inline void batched_tick_update::set_flag(::uint64_t value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:agg_proto.batched_tick_update.flag)
}
inline ::uint64_t batched_tick_update::_internal_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.flag_;
}
inline void batched_tick_update::_internal_set_flag(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.flag_ = value;
}

// repeated .agg_proto.tick_update updates = 5;
inline int batched_tick_update::_internal_updates_size() const {
  return _internal_updates().size();
}
inline int batched_tick_update::updates_size() const {
  return _internal_updates_size();
}
inline void batched_tick_update::clear_updates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.updates_.Clear();
}
inline ::agg_proto::tick_update* batched_tick_update::mutable_updates(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:agg_proto.batched_tick_update.updates)
  return _internal_mutable_updates()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>* batched_tick_update::mutable_updates()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:agg_proto.batched_tick_update.updates)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_updates();
}
inline const ::agg_proto::tick_update& batched_tick_update::updates(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:agg_proto.batched_tick_update.updates)
  return _internal_updates().Get(index);
}
inline ::agg_proto::tick_update* batched_tick_update::add_updates() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::agg_proto::tick_update* _add = _internal_mutable_updates()->Add();
  // @@protoc_insertion_point(field_add:agg_proto.batched_tick_update.updates)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>& batched_tick_update::updates() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:agg_proto.batched_tick_update.updates)
  return _internal_updates();
}
inline const ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>&
batched_tick_update::_internal_updates() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.updates_;
}
inline ::google::protobuf::RepeatedPtrField<::agg_proto::tick_update>*
batched_tick_update::_internal_mutable_updates() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.updates_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace agg_proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // aggregator_2eproto_2epb_2eh
