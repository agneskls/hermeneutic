// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: aggregator.proto

#include "aggregator.pb.h"
#include "aggregator.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace agg_proto {

static const char* agg_service_method_names[] = {
  "/agg_proto.agg_service/TickSnapshotRequest",
  "/agg_proto.agg_service/TickStreamRequest",
  "/agg_proto.agg_service/TickBatchedStreamRequest",
};

std::unique_ptr< agg_service::Stub> agg_service::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< agg_service::Stub> stub(new agg_service::Stub(channel, options));
  return stub;
}

agg_service::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_TickSnapshotRequest_(agg_service_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TickStreamRequest_(agg_service_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_TickBatchedStreamRequest_(agg_service_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status agg_service::Stub::TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::agg_proto::tick_update* response) {
  return ::grpc::internal::BlockingUnaryCall< ::agg_proto::tick_request, ::agg_proto::tick_update, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TickSnapshotRequest_, context, request, response);
}

void agg_service::Stub::async::TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::agg_proto::tick_request, ::agg_proto::tick_update, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TickSnapshotRequest_, context, request, response, std::move(f));
}

void agg_service::Stub::async::TickSnapshotRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TickSnapshotRequest_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>* agg_service::Stub::PrepareAsyncTickSnapshotRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::agg_proto::tick_update, ::agg_proto::tick_request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TickSnapshotRequest_, context, request);
}

::grpc::ClientAsyncResponseReader< ::agg_proto::tick_update>* agg_service::Stub::AsyncTickSnapshotRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncTickSnapshotRequestRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::agg_proto::tick_update>* agg_service::Stub::TickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) {
  return ::grpc::internal::ClientReaderFactory< ::agg_proto::tick_update>::Create(channel_.get(), rpcmethod_TickStreamRequest_, context, request);
}

void agg_service::Stub::async::TickStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::grpc::ClientReadReactor< ::agg_proto::tick_update>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::agg_proto::tick_update>::Create(stub_->channel_.get(), stub_->rpcmethod_TickStreamRequest_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::agg_proto::tick_update>* agg_service::Stub::AsyncTickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agg_proto::tick_update>::Create(channel_.get(), cq, rpcmethod_TickStreamRequest_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::agg_proto::tick_update>* agg_service::Stub::PrepareAsyncTickStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agg_proto::tick_update>::Create(channel_.get(), cq, rpcmethod_TickStreamRequest_, context, request, false, nullptr);
}

::grpc::ClientReader< ::agg_proto::batched_tick_update>* agg_service::Stub::TickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request) {
  return ::grpc::internal::ClientReaderFactory< ::agg_proto::batched_tick_update>::Create(channel_.get(), rpcmethod_TickBatchedStreamRequest_, context, request);
}

void agg_service::Stub::async::TickBatchedStreamRequest(::grpc::ClientContext* context, const ::agg_proto::tick_request* request, ::grpc::ClientReadReactor< ::agg_proto::batched_tick_update>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::agg_proto::batched_tick_update>::Create(stub_->channel_.get(), stub_->rpcmethod_TickBatchedStreamRequest_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>* agg_service::Stub::AsyncTickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agg_proto::batched_tick_update>::Create(channel_.get(), cq, rpcmethod_TickBatchedStreamRequest_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::agg_proto::batched_tick_update>* agg_service::Stub::PrepareAsyncTickBatchedStreamRequestRaw(::grpc::ClientContext* context, const ::agg_proto::tick_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::agg_proto::batched_tick_update>::Create(channel_.get(), cq, rpcmethod_TickBatchedStreamRequest_, context, request, false, nullptr);
}

agg_service::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      agg_service_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< agg_service::Service, ::agg_proto::tick_request, ::agg_proto::tick_update, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](agg_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agg_proto::tick_request* req,
             ::agg_proto::tick_update* resp) {
               return service->TickSnapshotRequest(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      agg_service_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< agg_service::Service, ::agg_proto::tick_request, ::agg_proto::tick_update>(
          [](agg_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agg_proto::tick_request* req,
             ::grpc::ServerWriter<::agg_proto::tick_update>* writer) {
               return service->TickStreamRequest(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      agg_service_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< agg_service::Service, ::agg_proto::tick_request, ::agg_proto::batched_tick_update>(
          [](agg_service::Service* service,
             ::grpc::ServerContext* ctx,
             const ::agg_proto::tick_request* req,
             ::grpc::ServerWriter<::agg_proto::batched_tick_update>* writer) {
               return service->TickBatchedStreamRequest(ctx, req, writer);
             }, this)));
}

agg_service::Service::~Service() {
}

::grpc::Status agg_service::Service::TickSnapshotRequest(::grpc::ServerContext* context, const ::agg_proto::tick_request* request, ::agg_proto::tick_update* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status agg_service::Service::TickStreamRequest(::grpc::ServerContext* context, const ::agg_proto::tick_request* request, ::grpc::ServerWriter< ::agg_proto::tick_update>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status agg_service::Service::TickBatchedStreamRequest(::grpc::ServerContext* context, const ::agg_proto::tick_request* request, ::grpc::ServerWriter< ::agg_proto::batched_tick_update>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace agg_proto

